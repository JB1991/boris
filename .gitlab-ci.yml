image: docker:stable

services:
  - docker:stable-dind

stages:
  - init
  - test
  - build
  - package
  - deploy

cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - power/node_modules/
  policy: pull-push

install:
  stage: init
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
  script:
    # install node modules
    - cd power
    - npm ci
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

test:karma:
  stage: test
  image: trion/ng-cli-karma:latest
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  script:
    # Run Karma tests
    - cd power
    - node_modules/@angular/cli/bin/ng test --browsers ChromeHeadlessNoSandbox --progress false --watch false --code-coverage
  coverage: '/Lines \W+: (\d+\.\d+)%.*/'
  artifacts:
    expire_in: 2 weeks
    reports:
      junit: power/output/junit_karma.xml
    paths:
      - power/output/junit_karma.xml
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

test:e2e:
  stage: test
  image: trion/ng-cli-e2e:latest
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  script:
    # Run E2E tests
    - cd power
    - node_modules/@angular/cli/bin/ng e2e --protractor-config e2e/protractor-ci.conf.js
  artifacts:
    expire_in: 2 weeks
    reports:
      junit: power/output/junit_e2e.xml
    paths:
      - power/output/junit_e2e.xml
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production
  when: manual

test:audit:
  stage: test
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  allow_failure: true
  script:
    - cd power
    - npm audit
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

test:lint:
  stage: test
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  allow_failure: true
  script:
    - cd power
    - npm run lint
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

test:lint:html:
  stage: test
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  allow_failure: true
  script:
    - cd power
    - npm run lint:html
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

test:lint:styles:
  stage: test
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  allow_failure: true
  script:
    - cd power
    - npm run lint:styles
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

build:
  stage: build
  image: node:alpine
  dependencies: []
  cache:
    <<: *global_cache
    policy: pull
  script:
    - cd power
    - npm run build -- --prod --aot=true --output-hashing=none --buildOptimizer=true --localize
  artifacts:
    name: "compiled dist"
    expire_in: 2 days
    paths:
      - power/dist/power
  only:
    - merge_requests
    - tags
    - dev
    - staging
    - production

package:
  stage: package
  image: docker:stable
  dependencies:
    - build
  cache: {}
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" --build-arg=COMMIT="$CI_COMMIT_SHORT_SHA" --build-arg=BRANCH="$CI_COMMIT_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  only:
    - dev
    - staging
    - production

deploy:development:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  dependencies: []
  cache: {}
  script:
    - kubectl config set-cluster k8s --server="$KUBE_API_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials "$KUBE_DEPLOY_SECRET_NAME" --token="$KUBE_API_TOKEN"
    - kubectl config set-context default --cluster=k8s --user="$KUBE_DEPLOY_SECRET_NAME"
    - kubectl config use-context default
    - helm upgrade power ./chart/power -n "$CI_COMMIT_REF_NAME" --install --set=image.tag="$CI_COMMIT_SHORT_SHA",environment="dev"
  only:
    - dev

deploy:staging:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  dependencies: []
  cache: {}
  environment: staging
  script:
    - kubectl config set-cluster k8s --server="$KUBE_API_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials "$KUBE_DEPLOY_SECRET_NAME" --token="$KUBE_API_TOKEN"
    - kubectl config set-context default --cluster=k8s --user="$KUBE_DEPLOY_SECRET_NAME"
    - kubectl config use-context default
    - helm upgrade power ./chart/power -n "$CI_COMMIT_REF_NAME" --install --set=image.tag="$CI_COMMIT_SHORT_SHA",environment="staging"
  only:
    - staging

deploy:production:
  stage: deploy
  image: dtzar/helm-kubectl:latest
  dependencies: []
  cache: {}
  environment: production
  script:
    - kubectl config set-cluster k8s --server="$KUBE_API_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials "$KUBE_DEPLOY_SECRET_NAME" --token="$KUBE_API_TOKEN"
    - kubectl config set-context default --cluster=k8s --user="$KUBE_DEPLOY_SECRET_NAME"
    - kubectl config use-context default
    - helm upgrade power ./chart/power -n "$CI_COMMIT_REF_NAME" --install --set=image.tag="$CI_COMMIT_SHORT_SHA",environment="production" --set replicaCount=2
  only:
    - production
  when: manual
