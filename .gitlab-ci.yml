image: docker:19-git

services:
  - docker:19-dind

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_REF_SLUG

stages:
  - init
  - test
  - build
  - package
  - deploy

install:
  stage: init
  image: node:13
  script:
    # Install node modules
    - cd power
    - npm install
  artifacts:
    expire_in: 1 week
    paths:
      - power/node_modules/
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - power/node_modules/
  only:
    - merge_requests
    - master

test:karma:
  stage: test
  image: node:13
  before_script:
    # Install chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub |  apt-key add -
    - echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' |  tee /etc/apt/sources.list.d/google-chrome.list
    - apt-get update
    - apt-get install google-chrome-stable -y
  script:
    # Run Karma tests
    - cd power
    - node_modules/@angular/cli/bin/ng test --browsers ChromeHeadlessNoSandbox --progress false --watch false --code-coverage --source-map=false
  coverage: '/Lines \W+: (\d+\.\d+)%.*/'
  artifacts:
    reports:
      junit: power/output/junit_karma.xml
    paths:
      - power/output/junit_karma.xml
  only:
    - merge_requests
    - master

test:e2e:
  stage: test
  image: node:13
  before_script:
    # Install chrome
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub |  apt-key add -
    - echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' |  tee /etc/apt/sources.list.d/google-chrome.list
    - apt-get update
    - apt-get install google-chrome-stable -y
  script:
    # Run E2E tests
    - cd power
    - node_modules/@angular/cli/bin/ng e2e --protractor-config e2e/protractor-ci.conf.js
  artifacts:
    reports:
      junit: power/output/junit_e2e.xml
    paths:
      - power/output/junit_e2e.xml
  only:
    - merge_requests
    - master

test:audit:
  stage: test
  image: node:13
  allow_failure: true
  script:
    - cd power
    - npm audit
  only:
    - merge_requests
    - master

include:
  # Refers to: https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Jobs/Code-Quality.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
  only:
    - merge_requests
    - master

build:
  stage: build
  image: node:13
  script:
    - cd power
    - npm run build -- --prod
  artifacts:
    expire_in: 1 week
    paths:
      - power/dist/power
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - power/dist/
  only:
    - master

package:
  stage: package
  image: docker
  dependencies:
    - build
  script:
    - export VERSION=$(cat power/package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$VERSION" .
    - docker push "$CI_REGISTRY_IMAGE:$VERSION"
  only:
    - master

deploy:dev:
  stage: deploy
  image: dtzar/helm-kubectl:3.1.2
  dependencies: []
  script:
    - export VERSION=$(cat power/package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
    - kubectl config set-cluster k8s --server="$KUBE_API_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials "$KUBE_DEPLOY_SECRET_NAME" --token="$KUBE_API_TOKEN"
    - kubectl config set-context default --cluster=k8s --user="$KUBE_DEPLOY_SECRET_NAME"
    - kubectl config use-context default
    - helm upgrade power ./chart/power -n dev --install --set=image.tag="$VERSION"
  only:
    - master

deploy:staging:
  stage: deploy
  image: dtzar/helm-kubectl:3.1.2
  dependencies: []
  script:
    - export VERSION=$(cat power/package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
    - kubectl config set-cluster k8s --server="$KUBE_API_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials "$KUBE_DEPLOY_SECRET_NAME" --token="$KUBE_API_TOKEN"
    - kubectl config set-context default --cluster=k8s --user="$KUBE_DEPLOY_SECRET_NAME"
    - kubectl config use-context default
    - helm upgrade power ./chart/power -n staging --install --set=image.tag="$VERSION"
  only:
    - master
  when: manual
